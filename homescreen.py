# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui files/homscreen.ui'
#
# Created by: PyQt5 UI code generator 5.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
import os
from simple_encoder_decoder_page import Ui_encoder_decoder
from osint_analysis import Osint
from subdomain_analysis import Subdomain
from path_traversal import PathTraversal
from file_operation import File_operation

class Ui_tiny_pentest_tool(object):

    selected_checkboxes = dict()

    def setupUi(self, tiny_pentest_tool):
        tiny_pentest_tool.setObjectName("tiny_pentest_tool")
        tiny_pentest_tool.setWindowModality(QtCore.Qt.NonModal)
        tiny_pentest_tool.resize(925, 564)
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(12)
        tiny_pentest_tool.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        tiny_pentest_tool.setWindowIcon(icon)
        self.subdomain_chc = QtWidgets.QCheckBox(tiny_pentest_tool)
        self.subdomain_chc.setGeometry(QtCore.QRect(200, 80, 20, 51))
        self.subdomain_chc.setMinimumSize(QtCore.QSize(0, 0))
        self.subdomain_chc.setAutoFillBackground(False)
        self.subdomain_chc.setText("")
        self.subdomain_chc.setTristate(False)
        self.subdomain_chc.setObjectName("subdomain_chc")
        self.subdomain_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.subdomain_btn.setGeometry(QtCore.QRect(30, 80, 161, 51))
        self.subdomain_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.subdomain_btn.setObjectName("subdomain_btn")
        self.path_traversal_chc = QtWidgets.QCheckBox(tiny_pentest_tool)
        self.path_traversal_chc.setGeometry(QtCore.QRect(200, 170, 20, 51))
        self.path_traversal_chc.setMinimumSize(QtCore.QSize(0, 0))
        self.path_traversal_chc.setAutoFillBackground(False)
        self.path_traversal_chc.setText("")
        self.path_traversal_chc.setObjectName("path_traversal_chc")
        self.path_traversal_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.path_traversal_btn.setGeometry(QtCore.QRect(30, 170, 161, 51))
        self.path_traversal_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.path_traversal_btn.setObjectName("path_traversal_btn")
        self.ssl_chc = QtWidgets.QCheckBox(tiny_pentest_tool)
        self.ssl_chc.setGeometry(QtCore.QRect(200, 260, 20, 51))
        self.ssl_chc.setMinimumSize(QtCore.QSize(0, 0))
        self.ssl_chc.setAutoFillBackground(False)
        self.ssl_chc.setText("")
        self.ssl_chc.setObjectName("ssl_chc")
        self.ssl_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.ssl_btn.setGeometry(QtCore.QRect(30, 260, 161, 51))
        self.ssl_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.ssl_btn.setObjectName("ssl_btn")
        self.osint_chc = QtWidgets.QCheckBox(tiny_pentest_tool)
        self.osint_chc.setGeometry(QtCore.QRect(270, 80, 20, 51))
        self.osint_chc.setMinimumSize(QtCore.QSize(0, 0))
        self.osint_chc.setAutoFillBackground(False)
        self.osint_chc.setText("")
        self.osint_chc.setObjectName("osint_chc")
        self.osint_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.osint_btn.setGeometry(QtCore.QRect(290, 80, 171, 51))
        self.osint_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.osint_btn.setObjectName("osint_btn")
        self.ids_ips_chc = QtWidgets.QCheckBox(tiny_pentest_tool)
        self.ids_ips_chc.setGeometry(QtCore.QRect(270, 170, 20, 51))
        self.ids_ips_chc.setMinimumSize(QtCore.QSize(0, 0))
        self.ids_ips_chc.setAutoFillBackground(False)
        self.ids_ips_chc.setText("")
        self.ids_ips_chc.setObjectName("ids_ips_chc")
        self.ids_ips_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.ids_ips_btn.setGeometry(QtCore.QRect(290, 170, 171, 51))
        self.ids_ips_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.ids_ips_btn.setObjectName("ids_ips_btn")
        self.whois_chc = QtWidgets.QCheckBox(tiny_pentest_tool)
        self.whois_chc.setGeometry(QtCore.QRect(270, 260, 20, 51))
        self.whois_chc.setMinimumSize(QtCore.QSize(0, 0))
        self.whois_chc.setAutoFillBackground(False)
        self.whois_chc.setText("")
        self.whois_chc.setObjectName("whois_chc")
        self.whois_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.whois_btn.setGeometry(QtCore.QRect(290, 260, 171, 51))
        self.whois_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.whois_btn.setObjectName("whois_btn")
        self.target_url_txtbox = QtWidgets.QLineEdit(tiny_pentest_tool)
        self.target_url_txtbox.setGeometry(QtCore.QRect(150, 30, 191, 31))
        self.target_url_txtbox.setObjectName("target_url_txtbox")
        self.analyse_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.analyse_btn.setGeometry(QtCore.QRect(160, 360, 171, 51))
        self.analyse_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.analyse_btn.setObjectName("analyse_btn")
        self.enc_dec_btn = QtWidgets.QPushButton(tiny_pentest_tool)
        self.enc_dec_btn.setGeometry(QtCore.QRect(160, 470, 171, 51))
        self.enc_dec_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.enc_dec_btn.setObjectName("enc_dec_btn")
        self.preview_tabs = QtWidgets.QTabWidget(tiny_pentest_tool)
        self.preview_tabs.setGeometry(QtCore.QRect(470, 30, 441, 501))
        self.preview_tabs.setElideMode(QtCore.Qt.ElideNone)
        self.preview_tabs.setObjectName("preview_tabs")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.subdomain_txtedit = QtWidgets.QPlainTextEdit(self.tab)
        self.subdomain_txtedit.setGeometry(QtCore.QRect(0, 0, 441, 471))
        self.subdomain_txtedit.setReadOnly(True)
        self.subdomain_txtedit.setObjectName("subdomain_txtedit")
        self.preview_tabs.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.osint_txtedit = QtWidgets.QPlainTextEdit(self.tab_3)
        self.osint_txtedit.setGeometry(QtCore.QRect(0, 0, 441, 471))
        self.osint_txtedit.setReadOnly(True)
        self.osint_txtedit.setObjectName("osint_txtedit")
        self.preview_tabs.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.path_traversal_txtedit = QtWidgets.QPlainTextEdit(self.tab_4)
        self.path_traversal_txtedit.setGeometry(QtCore.QRect(0, 0, 441, 471))
        self.path_traversal_txtedit.setReadOnly(True)
        self.path_traversal_txtedit.setObjectName("path_traversal_txtedit")
        self.preview_tabs.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.ids_ips_txtedit = QtWidgets.QPlainTextEdit(self.tab_5)
        self.ids_ips_txtedit.setGeometry(QtCore.QRect(0, 0, 441, 471))
        self.ids_ips_txtedit.setReadOnly(True)
        self.ids_ips_txtedit.setObjectName("ids_ips_txtedit")
        self.preview_tabs.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.ssl_txtedit = QtWidgets.QPlainTextEdit(self.tab_6)
        self.ssl_txtedit.setGeometry(QtCore.QRect(0, 0, 441, 471))
        self.ssl_txtedit.setReadOnly(True)
        self.ssl_txtedit.setObjectName("ssl_txtedit")
        self.preview_tabs.addTab(self.tab_6, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.whois_txtedit = QtWidgets.QPlainTextEdit(self.tab_2)
        self.whois_txtedit.setGeometry(QtCore.QRect(0, 0, 441, 471))
        self.whois_txtedit.setReadOnly(True)
        self.whois_txtedit.setObjectName("whois_txtedit")
        self.preview_tabs.addTab(self.tab_2, "")

        self.retranslateUi(tiny_pentest_tool)
        self.preview_tabs.setCurrentIndex(5)
        QtCore.QMetaObject.connectSlotsByName(tiny_pentest_tool)
        tiny_pentest_tool.setTabOrder(self.target_url_txtbox, self.subdomain_btn)
        tiny_pentest_tool.setTabOrder(self.subdomain_btn, self.subdomain_chc)
        tiny_pentest_tool.setTabOrder(self.subdomain_chc, self.path_traversal_btn)
        tiny_pentest_tool.setTabOrder(self.path_traversal_btn, self.path_traversal_chc)
        tiny_pentest_tool.setTabOrder(self.path_traversal_chc, self.ssl_btn)
        tiny_pentest_tool.setTabOrder(self.ssl_btn, self.ssl_chc)
        tiny_pentest_tool.setTabOrder(self.ssl_chc, self.osint_chc)
        tiny_pentest_tool.setTabOrder(self.osint_chc, self.osint_btn)
        tiny_pentest_tool.setTabOrder(self.osint_btn, self.ids_ips_chc)
        tiny_pentest_tool.setTabOrder(self.ids_ips_chc, self.ids_ips_btn)
        tiny_pentest_tool.setTabOrder(self.ids_ips_btn, self.whois_chc)
        tiny_pentest_tool.setTabOrder(self.whois_chc, self.whois_btn)
        tiny_pentest_tool.setTabOrder(self.whois_btn, self.analyse_btn)
        tiny_pentest_tool.setTabOrder(self.analyse_btn, self.enc_dec_btn)
        tiny_pentest_tool.setTabOrder(self.enc_dec_btn, self.preview_tabs)
        tiny_pentest_tool.setTabOrder(self.preview_tabs, self.subdomain_txtedit)
        tiny_pentest_tool.setTabOrder(self.subdomain_txtedit, self.osint_txtedit)
        tiny_pentest_tool.setTabOrder(self.osint_txtedit, self.path_traversal_txtedit)
        tiny_pentest_tool.setTabOrder(self.path_traversal_txtedit, self.ids_ips_txtedit)
        tiny_pentest_tool.setTabOrder(self.ids_ips_txtedit, self.ssl_txtedit)
        tiny_pentest_tool.setTabOrder(self.ssl_txtedit, self.whois_txtedit)

        self.analyse_btn.setDisabled(True)

        ## Button Click Events ##
        self.enc_dec_btn.clicked.connect(self.enc_dec_btn_clicked_event)
        self.subdomain_btn.clicked.connect(self.subdomain_btn_clicked_event)
        self.analyse_btn.clicked.connect(self.analyse_btn_clicked_event)
        self.ids_ips_btn.clicked.connect(self.ids_ips_btn_clicked_event)
        self.osint_btn.clicked.connect(self.osint_btn_clicked_event)
        self.ssl_btn.clicked.connect(self.ssl_btn_clicked_event)
        self.path_traversal_btn.clicked.connect(self.path_traversal_btn_clicked_event)
        self.whois_btn.clicked.connect(self.whois_btn_clicked_event)
        ############################
        ## Checkbox Toggle Events ##
        self.ids_ips_chc.toggled.connect(self.ids_ips_chc_toggled_event)
        self.osint_chc.toggled.connect(self.osint_chc_toggled_event)
        self.ssl_chc.toggled.connect(self.ssl_chc_toggled_event)
        self.subdomain_chc.toggled.connect(self.subdomain_chc_toggled_event)
        self.path_traversal_chc.toggled.connect(self.path_traversal_chc_toggled_event)
        self.whois_chc.toggled.connect(self.whois_chc_toggled_event)
        self.whois_chc.toggled.connect(self.whois_chc_toggled_event)
        ############################

    def retranslateUi(self, tiny_pentest_tool):
        _translate = QtCore.QCoreApplication.translate
        tiny_pentest_tool.setWindowTitle(_translate("tiny_pentest_tool", "Tiny Pentest Tool"))
        self.subdomain_btn.setText(_translate("tiny_pentest_tool", "Subdomain  Analysis"))
        self.path_traversal_btn.setText(_translate("tiny_pentest_tool", "Path Traversal"))
        self.ssl_btn.setText(_translate("tiny_pentest_tool", "SSL Analysis"))
        self.osint_btn.setText(_translate("tiny_pentest_tool", "OSINT Analysis"))
        self.ids_ips_btn.setText(_translate("tiny_pentest_tool", "IDS/IPS Analysis"))
        self.whois_btn.setText(_translate("tiny_pentest_tool", "Whois"))
        self.target_url_txtbox.setPlaceholderText(_translate("tiny_pentest_tool", "Target URL"))
        self.analyse_btn.setText(_translate("tiny_pentest_tool", "Analyse Selected"))
        self.enc_dec_btn.setText(_translate("tiny_pentest_tool", "Encode / Decode"))
        self.preview_tabs.setTabText(self.preview_tabs.indexOf(self.tab), _translate("tiny_pentest_tool", "Subdomain"))
        self.preview_tabs.setTabText(self.preview_tabs.indexOf(self.tab_3), _translate("tiny_pentest_tool", "OSINT"))
        self.preview_tabs.setTabText(self.preview_tabs.indexOf(self.tab_4), _translate("tiny_pentest_tool", "Path Traversal"))
        self.preview_tabs.setTabText(self.preview_tabs.indexOf(self.tab_5), _translate("tiny_pentest_tool", "IDS/IPS"))
        self.preview_tabs.setTabText(self.preview_tabs.indexOf(self.tab_6), _translate("tiny_pentest_tool", "SSL"))
        self.preview_tabs.setTabText(self.preview_tabs.indexOf(self.tab_2), _translate("tiny_pentest_tool", "Whois"))




    ## Click Event Methods ##

    def enc_dec_btn_clicked_event(self):
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_encoder_decoder()
        self.ui.setupUi(self.Form)
        self.Form.show()

    def subdomain_btn_clicked_event(self):
        sub = Subdomain()
        url = self.get_url()
        console_output = sub.analyse(url)
        self.subdomain_txtedit.setPlainText("\n".join(console_output).split("[-] Total Unique Subdomains Found")[-1].replace("[0m","").replace("[92","").split("[0m")[-1])

    ## My tricks is amazing. Rule the PushButton :) ##
    def analyse_btn_clicked_event(self):
        for checkbox,button in self.selected_checkboxes.items():
            if(button.isEnabled()):
                button.click()
            else:
                button.setDisabled(False)
                button.click() # if button is disabled,you must enable it.
                button.setDisabled(True)


    def ids_ips_btn_clicked_event(self):
        pass

    def osint_btn_clicked_event(self):
        url = self.get_url()

        osint = Osint()
        # oper = File_operation()

        console_output,output_file = osint.harvest(url)
        text = self.parse_osint_output(console_output)
        self.osint_txtedit.setPlainText(text)
        # output_file = os.getcwd() + "/results/output_texts/"+output_file

        # xml_output = oper.read(output_file+".xml")
        # html_output = oper.read(output_file+".html")
        # oper.parse_xml(output_file+".xml")




    def ssl_btn_clicked_event(self):
        pass

    def path_traversal_btn_clicked_event(self):
        url = self.get_url()
        print("girdim", url)
        path = PathTraversal()
        console_output = path.find_path(url)
        self.path_traversal_txtedit.setPlainText("\n".join(console_output))

    def whois_btn_clicked_event(self):
        pass

    #########################
    ## Toggle Event Methods##


    def ids_ips_chc_toggled_event(self):
        if(self.ids_ips_chc.isChecked()):
            self.selected_checkboxes.update({self.ids_ips_chc:self.ids_ips_btn})
        else:
            del self.selected_checkboxes[self.ids_ips_chc]
        self.check_dict()

    def osint_chc_toggled_event(self):
        if (self.osint_chc.isChecked()):
            self.selected_checkboxes.update({self.osint_chc:self.osint_btn})
        else:
            del self.selected_checkboxes[self.osint_chc]
        self.check_dict()

    def ssl_chc_toggled_event(self):
        if (self.ssl_chc.isChecked()):
            self.selected_checkboxes.update({self.ssl_chc:self.ssl_btn})
        else:
            del self.selected_checkboxes[self.ssl_chc]
        self.check_dict()

    def subdomain_chc_toggled_event(self):
        if (self.subdomain_chc.isChecked()):
            self.selected_checkboxes.update({self.subdomain_chc:self.subdomain_btn})
        else:
            del self.selected_checkboxes[self.subdomain_chc]
        self.check_dict()

    def path_traversal_chc_toggled_event(self):
        if (self.path_traversal_chc.isChecked()):
            self.selected_checkboxes.update({self.path_traversal_chc:self.path_traversal_btn})
        else:
            del self.selected_checkboxes[self.path_traversal_chc]
        self.check_dict()

    def whois_chc_toggled_event(self):
        if (self.whois_chc.isChecked()):
            self.selected_checkboxes.update({self.whois_chc:self.whois_btn})
        else:
            del self.selected_checkboxes[self.whois_chc]
        self.check_dict()

    ##########################

    ## Improve the User Experience ####
    def check_dict(self):
        if(len(self.selected_checkboxes) == 0):
            self.enabled_all_analysis_btn()
        else:
            self.disabled_all_analysis_btn()

    def disabled_all_analysis_btn(self):
        self.analyse_btn.setDisabled(False)
        self.whois_btn.setDisabled(True)
        self.path_traversal_btn.setDisabled(True)
        self.subdomain_btn.setDisabled(True)
        self.osint_btn.setDisabled(True)
        self.ssl_btn.setDisabled(True)
        self.ids_ips_btn.setDisabled(True)


    def enabled_all_analysis_btn(self):
        self.analyse_btn.setDisabled(True)
        self.whois_btn.setDisabled(False)
        self.path_traversal_btn.setDisabled(False)
        self.subdomain_btn.setDisabled(False)
        self.osint_btn.setDisabled(False)
        self.ssl_btn.setDisabled(False)
        self.ids_ips_btn.setDisabled(False)

    def get_url(self):
        url = self.target_url_txtbox.text()
        if(url.find("www") == -1):
            url = url.split("//")[-1]
        else:
            url = url.split("www.")[-1]
        return url
    def parse_osint_output(self,console_output):
        return '\n'.join(console_output).replace("[92m","").replace("[94m","").split("Harvesting results")[-1].replace("[1;33;40m","").replace("\n\n\n","")
    ###################################

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    tiny_pentest_tool = QtWidgets.QDialog()
    ui = Ui_tiny_pentest_tool()
    ui.setupUi(tiny_pentest_tool)
    tiny_pentest_tool.show()
    sys.exit(app.exec_())

