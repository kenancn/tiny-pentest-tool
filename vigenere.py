from itertools import cycle
from functools import partial
from string import ascii_uppercase

class Vigenere:
    def transform(self,crypt_function, k, s):
        return chr(crypt_function(ord(k), ord(s)))


    def encode26(self,a, b):
        return (((a + b) - 130) % 26) + 65


    def decode26(self,a, b):
        return (((b - a) - 130) % 26) + 65


    def cipher(self,crypt_function, key, string):
        transform_function = partial(self.transform, crypt_function)
        mapped_transform = map(transform_function, cycle(key), string)
        return ''.join(mapped_transform)


    def safe_cipher(self,crypt_function, key, string):
        k = ''.join(filter(lambda k: k in ascii_uppercase, key.upper()))
        s = ''.join(filter(lambda s: s in ascii_uppercase, string.upper()))
        return (k, self.cipher(crypt_function, k, s))


vig = Vigenere()
print(type(vig.safe_cipher(vig.decode26, "koray", "NSEEKO")))
